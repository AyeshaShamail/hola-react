 -----------REDUX-------------
 Data Management Library/State management library - Redux

 Redux or Redux toolkit - to do the same thing as useContext

 Redux also creates a store, a central store - from where we can access all of it.

 Context vs Redux store

 small/medium - useContext
 large - Redux(can use useContext but redux gives scalability)

 React and Redux are different libraries. Redux is not mandatory but can be used when required.

 Redux alternative - Zustand(checkout)

Redux is used to manage the state of our application.Application becomes easier to debug.

Chrome extension to debug - Redux dev tools

Redux is a predictable state container for JS Apps

Will use React-Redux(bindings for React) and Redux Toolkit libraries(opinionated, batteries-included toolset for efficient Redux development)

Redux store is like a big JS object which is kept in a global central place.

Slices - small portion of our redux store, which is needed to keep data seperate we do partitional logically. There can be theme slice, user slice, cart slice or whatever slice which we want.
We can't directly modify the slice, if we need to do/ write the data i.e when u click on an add button --> it dispatches an action --> it calls a Reducer function() --> this function internally modifies the cart(which updates the slice of our Redux store). The function is known as a "Reducer"

Refer the diagram - <img src="./Redux-toolkit.png" />

If we want read the data from cart slice and see it in UI-- we use something known as a selector to read the data from our store which will modify our react component(header). This phenomenon is known as subscribing to the store, we can say that our header component is subscribed to our store i.e sync with the store.

Redux Toolkit
- Install @reduxjs/toolkit and react-redux
- Build our store
- Connect store to our application
- Create a  cartSlice
- dispatch action
- Read the data using selector

configureStore - configuring the store is Redux job
provider - providing it to a react app is react-redux job

Interview Qsn-

 ==> While doing selector, make sure you're subscribing to right portion of the store. Here we can optimise the performance, else it will be a huge performance loss .
Let's say for line 7 in Cart.js we'll write 
`const store = useSelector((store) => store);

const cartItems = store.cart.items;` -- subscribing to the whole store -- which is less efficient

which is same as `const cartItems = useSelector((store) => store.cart.items)` --> subscribing small portion of the store -- doesn't get affect by whatever happening outside of this.

Both will work fine but the first one is less efficient

Because when our application grows big,store grows big - we don't want our componnet to be affected

The name is selector because we're selecting a portion of the store

==> reducer and reducers are different

Reducer is a combination of different small reducers

While creating a appStore, it's Reducer i.e., one big reducer and it can have multiple reducers
While creating slice, we have Reducers, we have multiple small reducer functions, while exporting we export only one reducer function(which is combination of multiple small reducers).

-- Vanilla or older redux used to give error - Don't mutate the state while doing state.items.push(action,payload)

earlier ppl used to create a copy of a variable or a new state as shown below-

const newState = [...state];
newState.items.push(action, payload);
return newState;

Redux uses something called Immer.js library(tiny package that allows you to work with immutable state) - basically this finds difference btw original state(mutated state) and gives back the new copy of the state(immutable state)