----- Types of testing done by developers-------
1. Unit testing -- Testing react components in isolation - only one specific component is being tested and not the whole react application
2. Integration testing -- Integration of many components which are talking to each other where we develop the flow of action
3. End-end testing (e2e testing) - Testing the entire application flows from user landing on the page to leaving the app - simulating how user will flow across the app - requires different types of tools like Selenium,Cypress, Puppeteer

npm create-react-app installation already have react-testing library,bundlers,state managemnet and routing integrated in it
Since we're building from scratch we're installing

React testing library uses JEST BTS

React testing library takes something known as JEST(delightful JS testing framework with a focus on simplicity)

------------- How to set up react app to write the test cases -------------

Libraries - React testing library - npm install --save-dev @testing-library/react or npm i -D @testing-library/react (saving as dev dependency) 

Installing JEST into our application - npm install -D Jest

Since we're using along with Babel(Transpiler), let's intsall - npm install --save-dev babel-jest @babel/core @babel/preset-env - parcel already uses babel and it has its own babel configuration - now when we write our own babel configuration, it kinda over rides the parcel configuration for babel and keep this

Once all are installed now configure babel in babel.config.js - create babel.config.js file in the root and write the code present in backticks

`module.exports = {
  presets: [["@babel/preset-env", { targets: { node: "current" } }]],
};`

To make our own configuration to use babel config and not parcel babel config, do changes in RC file of parcel - create rc file in root called .parcelrc and paste the code embedded with backticks
`{
  "extends": "@parcel/config-default",
  "transformers": {
    "*.{js,mjs,jsx,cjs,ts,tsx}": [
      "@parcel/transformer-js",
      "@parcel/transformer-react-refresh-wrap"
    ]
  }
}`
--------------------------------------------------------------------

To run test cases - npm run test

-------------------- JEST Configuration---------------------------------------

-- npx jest --init
Answer below qsn 
1. No because we're not using Typescript
2. jsdom(browser-like)
3. yes
4. babel
5. yes

The following questions will help Jest to create a suitable configuration for your project

✔ Would you like to use Typescript for the configuration file? … no
✔ Choose the test environment that will be used for testing › jsdom (browser-like)
✔ Do you want Jest to add coverage reports? … yes
✔ Which provider should be used to instrument code for coverage? › babel
✔ Automatically clear mock calls, instances, contexts and results before every test? … yes

📝  Configuration file created at /home/ayesha/Desktop/hola-react/jest.config.js

-------------------- Install jsdom library---------------------------------------
Go to react testing library>React Testing Library > Setup >Jest 28 section(depend on version u have installed)> npm install --save-dev jest-environment-jsdom
 
-D === --save-dev

-------------------------------Writing Test Cases------------------------------------------------------

1. create a folder __tests__ anywhere in the folder structure, the files with extension js or ts will be considered as our test files. Otherwise we can create any file with fileName.test.js or fileName.test.ts or fileName.spec.js or fileName.test.ts as mentioned in regex
2. Create a file sum.test.js and we write it as below-
Sum function takes 2 args one is string and other is callback func()
`test("Description of the test", () => {implementation of the function})`


For more info or Home work- go to parcel docs>JS>Babel and read
-- jsdom(browser-like) - when we write test cases, they don't have server means they don't run on google chrome. So to run we need a server or run-time where test cases can be executed - jsdom is like a browser
Home work - go through jsdom docs

__ before and after tests is known as dunder, which is a reserved keyword.

First error occurs after writing Contact.test.js then install @babel/preset-react - to make JSX work in test cases
and include @babel/preset-react inside my babel config -- ["@babel/preset-react", { runtime: "automatic" }]

The second error occurs  - "TypeError: expect(...).toBeInTheDocumnet is not a function"

It occurs because - we're trying to render our componnet to JSDOM and we're trying to find our heading in the rendered screen.Now we're seraching our heading is inside the document or not and it says this function doesn't exist because we have not installed a library - npm i -D @testing-library/jest-dom .
Once intsalled we can find toBeInTheDocumnet() and import "@testing-library/jest-dom" in Contact.test.js file


-- Another error will come while loading header component -- "could not find react-redux context value; please ensure the component is wrapped in a <Provider>" -- failed at a point because of useSelector

Since our app use redux , here we're rendering our header component in isolation(We're rendering in jsdom) - JSDOM understand JSX code but doesn't understand redux code, when it goes through header component, it understand everything but when we comes to useSelector it fails and hence we have to provide a redux store to the component.

-- Another error - "TypeError: Cannot destructure property 'basename' of 'React__namespace.useContext(...)' as it is null." and 
-- Another error - "The above error occurred in the <Link> component:" -- when we go through header component we go through Link which is coming from react-router-dom - we have to provide context of react router dom to our render/header/app

